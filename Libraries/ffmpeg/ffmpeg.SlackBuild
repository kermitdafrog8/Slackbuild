#!/bin/bash

# Slackware build script for ffmpeg

# Copyright 2010-2024  Heinz Wiesinger, Amsterdam, The Netherlands
# Copyright 2017, 2018, 2022, 2024  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Originally written by core (eroc@linuxmail.org)
# Modified by Robby Workman <rworkman@slackbuilds.org>

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=ffmpeg
VERSION=${VERSION:-$(echo $PKGNAM-*.tar.xz | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-2}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM

NUMJOBS=${NUMJOBS:-" -j$(expr $(nproc) + 1) "}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686 -fPIC"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686 -fPIC"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

# If PulseAudio is not found, use the _alsa $TAG and disable it in the build:
if [ ! -r /usr/lib${LIBDIRSUFFIX}/pkgconfig/libpulse.pc ]; then
  TAG="_alsa"
  PULSEAUDIO=no
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD$TAG.txz"
  exit 0
fi

# Configure ffmpeg features not autodetected by default.
# You can enable a lot of optional (not-autodetected) features by
# passing variables to the script (VAR=yes/no ./ffmpeg.SlackBuild).
# Unfortunately ffmpeg's configure doesn't support --enable-feature=yes
# syntax, so we have to do it the complicated way :/
# Additional optional (autodetected) dependencies are:
# - bzip2
# - libva
# - libvdpau
# - libX11
# - libxcb
# - nvdec/nvenc
# - sdl2
# - xz
# - zlib

# Select one of these for HTTPS support
ssl=""          ; [ "${OPENSSL:-no}" != "no" ]  && \
  { ssl="--enable-openssl" ; non_free="--enable-nonfree" ; }
gnutls=""     ; [ "${GNUTLS:-yes}" != "no" ]      && gnutls="--enable-gnutls"

# Select one of these for RTMP[E] support
librtmp=""    ; [ "${RTMP:-no}" != "no" ]         && librtmp="--enable-librtmp"
gmp=""        ; [ "${GMP:-no}" != "no" ]          && gmp="--enable-gmp"
libgcrypt=""  ; [ "${GCRYPT:-yes}" != "no" ]      && libgcrypt="--enable-gcrypt"

# Select one of these for GLSL->SPIRV compilation (Required for Vulkan support)
libglslang="" ; [ "${GLSLANG:-no}" != "no" ]      && libglslang="--enable-libglslang"
shaderc=""    ; [ "${SHADERC:-yes}" != "no" ]     && libshaderc="--enable-libshaderc"

libx264=""    ; [ "${X264:-no}" != "no" ]         && libx264="--enable-libx264"
libcelt=""    ; [ "${CELT:-no}" != "no" ]         && libcelt="--enable-libcelt"
libdc1394=""  ; [ "${DC1394:-no}" != "no" ]       && libdc1394="--enable-libdc1394"
libgsm=""     ; [ "${GSM:-no}" != "no" ]          && libgsm="--enable-libgsm"
libxvid=""    ; [ "${XVID:-no}" != "no" ]         && libxvid="--enable-libxvid"
libiec61883=""; [ "${IEC61883:-no}" != "no" ]     && libiec61883="--enable-libiec61883"
libilbc=""    ; [ "${ILBC:-no}" != "no" ]         && libilbc="--enable-libilbc"
libmodplug="" ; [ "${MODPLUG:-no}" != "no" ]      && libmodplug="--enable-libmodplug"
libtwolame="" ; [ "${TWOLAME:-no}" != "no" ]      && libtwolame="--enable-libtwolame"
ladspa=""     ; [ "${LADSPA:-no}" != "no" ]       && ladspa="--enable-ladspa"
libflite=""   ; [ "${FLITE:-no}" != "no" ]        && libflite="--enable-libflite"
libx265=""    ; [ "${X265:-no}" != "no" ]         && libx265="--enable-libx265"
libzvbi=""    ; [ "${ZVBI:-no}" != "no" ]         && libzvbi="--enable-libzvbi"
libgme=""     ; [ "${GME:-no}" != "no" ]          && libgme="--enable-libgme"
libsnappy=""  ; [ "${SNAPPY:-no}" != "no" ]       && libsnappy="--enable-libsnappy"
libzmq=""     ; [ "${ZMQ:-no}" != "no" ]          && libzmq="--enable-libzmq"
libbs2b=""    ; [ "${BS2B:-no}" != "no" ]         && libbs2b="--enable-libbs2b"
rubberband="" ; [ "${RUBBERBAND:-no}" != "no" ]   && rubberband="--enable-librubberband"
tesseract=""  ; [ "${TESSERACT:-no}" != "no" ]    && tesseract="--enable-libtesseract"
libjack=""    ; [ "${JACK:-no}" != "no" ]         && libjack="--enable-libjack"
lv2=""        ; [ "${LV2:-no}" != "no" ]          && lv2="--enable-lv2"
rabbitmq=""   ; [ "${RABBITMQ:-no}" != "no" ]     && rabbitmq="--enable-librabbitmq"
libcodec2=""  ; [ "${CODEC2:-no}" != "no" ]       && libcodec2="--enable-libcodec2"
libsoxr=""    ; [ "${SOXR:-no}" != "no" ]         && libsoxr="--enable-libsoxr"
libsrt=""     ; [ "${SRT:-no}" != "no" ]          && libsrt="--enable-libsrt"
libzimg=""    ; [ "${ZIMG:-no}" != "no" ]         && libzimg="--enable-libzimg"
chromaprint=""  ; [ "${CHROMAPRINT:-no}" != "no" ] && chromaprint="--enable-chromaprint"
vapoursynth=""  ; [ "${VAPOURSYNTH:-no}" != "no" ] && vapoursynth="--enable-vapoursynth"
opencore_amr="" ; [ "${OPENCORE:-no}" != "no" ] && \
  opencore_amr="--enable-libopencore-amrnb --enable-libopencore-amrwb"
fdk=""          ; [ "${FDK_AAC:-no}" != "no" ]  && \
  { fdk="--enable-libfdk-aac"; non_free="--enable-nonfree" ; }
decklink=""   ; [ "${DECKLINK:-no}" != "no" ]   && \
  { decklink="--enable-decklink" ; \
    SLKCFLAGS="$SLKCFLAGS -I/usr/include/decklink" ; }
libaribb24="" ; [ "${ARIBB24:-no}" != "no" ]     && libaribb24="--enable-libaribb24"
libjxl=""     ; [ "${JXL:-no}" != "no" ]         && libjxl="--enable-libjxl"
librist=""    ; [ "${RIST:-no}" != "no" ]        && librist="--enable-librist"
libshine=""   ; [ "${SHINE:-no}" != "no" ]       && libshine="--enable-libshine"
svtav1=""     ; [ "${SVTAV1:-no}" != "no" ]      && svtav1="--enable-libsvtav1"
libmysofa=""  ; [ "${MYSOFA:-no}" != "no" ]      && libmysofa="--enable-libmysofa"
libxavs2=""   ; [ "${XAVS2:-no}" != "no" ]       && libxavs2="--enable-libxavs2"
libvmaf=""    ; [ "${VMAF:-no}" != "no" ]         && libvmaf="--enable-libvmaf"

# Needs older opencv than we ship. See https://trac.ffmpeg.org/ticket/7059
libopencv=""  ; [ "${OPENCV:-no}" != "no" ]       && libopencv="--enable-libopencv"

# Needs newer lensfun than we ship. See https://trac.ffmpeg.org/ticket/9112
liblensfun="" ; [ "${LENSFUN:-no}" != "no" ]     && liblensfun="--enable-liblensfun"

# Default enabled features:
fontconfig="" ; [ "${FONTCONFIG:-yes}" != "no" ]  && fontconfig="--enable-libfontconfig"
freetype=""   ; [ "${FREETYPE:-yes}" != "no" ]    && freetype="--enable-libfreetype"
fribidi=""    ; [ "${FRIBIDI:-yes}" != "no" ]     && fribidi="--enable-libfribidi"
libaom=""     ; [ "${AOM:-yes}" != "no" ]          && libaom="--enable-libaom"
libbluray=""  ; [ "${BLURAY:-yes}" != "no" ]      && libbluray="--enable-libbluray"
libcaca=""    ; [ "${CACA:-yes}" != "no" ]        && libcaca="--enable-libcaca"
libcdio=""    ; [ "${LIBCDIO:-yes}" != "no" ]     && libcdio="--enable-libcdio"
libdav1d=""   ; [ "${DAV1D:-yes}" != "no" ]        && libdav1d="--enable-libdav1d"
libssh=""     ; [ "${LIBSSH:-yes}" != "no" ]      && libssh="--enable-libssh"
libtheora=""  ; [ "${THEORA:-yes}" != "no" ]      && libtheora="--enable-libtheora"
libv4l2=""    ; [ "${V4L2:-yes}" != "no" ]        && libv4l2="--enable-libv4l2"
libvorbis=""  ; [ "${VORBIS:-yes}" != "no" ]      && libvorbis="--enable-libvorbis"
libvpx=""     ; [ "${VPX:-yes}" != "no" ]         && libvpx="--enable-libvpx"
libwebp=""    ; [ "${WEBP:-yes}" != "no" ]        && libwebp="--enable-libwebp"
mp3lame=""    ; [ "${LAME:-yes}" != "no" ]        && mp3lame="--enable-libmp3lame"
opencl=""     ; [ "${OPENCL:-yes}" != "no" ]      && opencl="--enable-opencl"
opengl=""     ; [ "${OPENGL:-yes}" != "no" ]      && opengl="--enable-opengl"
openjpeg=""   ; [ "${JP2:-yes}" != "no" ]         && openjpeg="--enable-libopenjpeg"
pulse=""      ; [ "${PULSEAUDIO:-yes}" != "no" ]  && pulse="--enable-libpulse"
samba=""      ; [ "${SAMBA:-yes}" != "no" ]       && samba="--enable-libsmbclient"
libfrei0r=""  ; [ "${FREI0R:-yes}" != "no" ]      && libfrei0r="--enable-frei0r"
libspeex=""   ; [ "${SPEEX:-yes}" != "no" ]       && libspeex="--enable-libspeex"
libopenal=""  ; [ "${OPENAL:-yes}" != "no" ]      && libopenal="--enable-openal"
libopus=""    ; [ "${OPUS:-yes}" != "no" ]        && libopus="--enable-libopus"
libvidstab="" ; [ "${VIDSTAB:-yes}" != "no" ]     && libvidstab="--enable-libvidstab"
libxml2=""    ; [ "${LIBXML2:-yes}" != "no" ]     && libxml2="--enable-libxml2"
librsvg=""    ; [ "${LIBRSVG:-yes}" != "no" ]     && librsvg="--enable-librsvg"
libdrm=""     ; [ "${LIBDRM:-yes}" != "no" ]      && libdrm="--enable-libdrm"
vulkan=""     ; [ "${VULKAN:-yes}" != "no" ]      && vulkan="--enable-vulkan"
libass=""     ; [ "${ASS:-yes}" != "no" ]         && libass="--enable-libass"
libplacebo="" ; [ "${PLACEBO:-yes}" != "no" ]     && libplacebo="--enable-libplacebo"
lcms2=""      ; [ "${LCMS2:-yes}" != "no" ]       && lcms2="--enable-lcms2"

# No default patent encumbered features:
aac=""        ; [ "${AAC:-no}" = "no" ]           && aac="--disable-encoder=aac"

rm -rf $PKG
mkdir -p $TMP $PKG
cd $TMP
rm -rf $PKGNAM-$VERSION
tar xf $CWD/$PKGNAM-$VERSION.tar.xz || exit 1
cd $PKGNAM-$VERSION || exit 1

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

# Restore missing function needed by Chromium and qt-webengine:
zcat $CWD/add-av_stream_get_first_dts-for-chromium.patch.gz | patch -p1 --verbose || exit 1

# Build against recent Vulkan:
zcat $CWD/ffmpeg.vulkan.diff.gz | patch -p1 --verbose || exit 1

# Fix ctx memory leak:
zcat $CWD/250471ea1745fc703eb346a2a662304536a311b1.patch | patch -p1 --verbose || exit 1

# Patch for recent nv-codec-headers:
zcat $CWD/0004-support-nv-codec-headers-12.2.patch.gz | patch -p1 --verbose || exit 1

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --shlibdir=/usr/lib${LIBDIRSUFFIX} \
  --docdir=/usr/doc/$PKGNAM-$VERSION/html \
  --mandir=/usr/man \
  --disable-debug \
  --enable-shared \
  --disable-static \
  --enable-gpl \
  --enable-version3 \
  --arch=$ARCH \
  $non_free \
  $aac \
  $chromaprint \
  $decklink \
  $fdk \
  $fontconfig \
  $freetype \
  $fribidi \
  $gnutls \
  $ladspa \
  $libass \
  $libbluray \
  $libbs2b \
  $libcaca \
  $libcdio \
  $libcelt \
  $libdc1394 \
  $libflite \
  $libfrei0r \
  $libgme \
  $libgsm \
  $libiec61883 \
  $libilbc \
  $libmodplug \
  $libopenal \
  $libopencv \
  $libopus \
  $librtmp \
  $libsnappy \
  $libspeex \
  $libssh \
  $libtheora \
  $libtwolame \
  $libv4l2 \
  $libvidstab \
  $libvorbis \
  $libvpx \
  $libwebp \
  $libx264 \
  $libx265 \
  $libxvid \
  $libzmq \
  $libzvbi \
  $mp3lame \
  $opencl \
  $opencore_amr \
  $opengl \
  $openjpeg \
  $pulse \
  $rubberband \
  $samba \
  $ssl \
  $tesseract \
  $liblensfun \
  $libxml2 \
  $librsvg \
  $vulkan \
  $libjack \
  $libglslang \
  $libdrm \
  $libaom \
  $lv2 \
  $libdav1d \
  $rabbitmq \
  $libcodec2 \
  $libsoxr \
  $libsrt \
  $libzimg \
  $vapoursynth \
  $libshaderc \
  $libgcrypt \
  $libplacebo \
  $lcms2 \
  $gmp \
  $libaribb24 \
  $libjxl \
  $librist \
  $libshine \
  $svtav1 \
  $libmysofa \
  $libxavs2 \
  $libvmaf || exit 1

make $NUMJOBS || make || exit 1
make install DESTDIR=$PKG || exit 1
make install-man DESTDIR=$PKG || exit 1

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | \
  grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \+

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/txt
cp -a \
  Changelog COPYING* CREDITS INSTALL* LICENSE* MAINTAINERS README* \
  RELEASE VERSION \
  $PKG/usr/doc/$PKGNAM-$VERSION
cp -a doc/*.txt $PKG/usr/doc/$PKGNAM-$VERSION/txt/
find . -name "RELEASE_NOTES" -exec cp -a {} $PKG/usr/doc/$PKGNAM-$VERSION/ \;

# If there's a ChangeLog, installing at least part of the recent history
# is useful, but don't let it get totally out of control:
if [ -r ChangeLog ]; then
  DOCSDIR=$(echo $PKG/usr/doc/${PKGNAM}-$VERSION)
  cat ChangeLog | head -n 1000 > $DOCSDIR/ChangeLog
  touch -r ChangeLog $DOCSDIR/ChangeLog
fi

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
